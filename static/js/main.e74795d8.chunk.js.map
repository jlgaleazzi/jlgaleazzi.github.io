{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","baseSymbol","setBaseSymbol","equivalentSymbol","setEquivalentSymbol","baseCode","setBaseCode","equivalentCode","setEquivalentCode","baseCurrency","setBaseCurrency","equivalentCurrency","setEquivalentCurrency","currencies","setCurrencies","loadingCurrencies","setLoadingCurrencies","validSymbols","setValidSymbols","hasError","setError","fetchRates","useCallback","code","undefined","fx","base","fetch","then","res","json","data","rates","useEffect","Promise","all","responses","map","console","log","Object","values","keys","symbols","tempString","toCode","find","item","fromCode","converted","Number","from","to","toFixed","e","currencyChangeHandler","evt","evtCode","target","value","currency","symbol","id","formatInput","input","className","type","onChange","event","String","replace","validity","valid","formattedValue","onFocus","preventDefault","pos","length","setSelectionRange","pattern","disabled","curr","i","key","readOnly","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e74795d8.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport fx from \"money\";\n\nfunction App() {\n\n  const [baseSymbol, setBaseSymbol] = useState(\"$\");\n  const [equivalentSymbol, setEquivalentSymbol] = useState(\"â‚¬\");\n  const [baseCode, setBaseCode] = useState(\"USD\");\n  const [equivalentCode, setEquivalentCode] = useState(\"EUR\");\n  const [baseCurrency, setBaseCurrency] = useState(\"\");\n  const [equivalentCurrency, setEquivalentCurrency] = useState(\"\");\n  const [currencies, setCurrencies] = useState([]);\n  const [loadingCurrencies, setLoadingCurrencies] = useState(true);\n  const [validSymbols, setValidSymbols] = useState([])\n  const [hasError, setError] = useState(false)\n  const fetchRates = useCallback((code) => {\n    if (code === undefined) code = baseCode;\n    fx.base = code;\n    fetch(`https://api.exchangeratesapi.io/latest?base=${code}`)\n      .then(res => res.json())\n      .then(data => fx.rates = data.rates);\n\n  }, [baseCode])\n\n\n  // api key d0948b2dbfc72d3feb88df186790bcd4\n  useEffect(() => {\n    Promise.all([\n      fetch(\"https://gist.githubusercontent.com/mddenton/062fa4caf150bdf845994fc7a3533f74/raw/27beff3509eff0d2690e593336179d4ccda530c2/Common-Currency.json\"),\n      fetch(`http://data.fixer.io/api/symbols?access_key=d0948b2dbfc72d3feb88df186790bcd4`)])\n      .then(responses => {\n        return Promise.all(responses.map(function (res) {\n          return res.json();\n        }))\n      })\n      .then(data => {\n        console.log(\"data :\" + data);\n        setCurrencies(Object.values(data[0]));\n        setLoadingCurrencies(false);\n        fetchRates();\n        setValidSymbols(Object.keys(data[1].symbols));\n      })\n  }, [fetchRates])\n\n\n  let tempString = \"\";\n\n\n  useEffect(() => {\n    if (baseCurrency !== \"\") {\n      // validate codes \n      let toCode = validSymbols.find(item => item === equivalentCode);\n      let fromCode = validSymbols.find(item => item === baseCode);\n      if (fromCode !== undefined && toCode !== undefined) {\n        console.log(`from ${fromCode} to ${toCode}`);\n        try {\n          let converted = fx(Number(baseCurrency)).from(fromCode).to(toCode);\n          setEquivalentCurrency(converted.toFixed(2))\n          setError(false)\n        }\n        catch (e) {\n          setError(true)\n          console.log(\"conversion not supported\")\n        }\n      } else {\n        setError(true)\n      }\n    }\n\n  }, [baseCurrency, baseCode, equivalentCode, hasError, validSymbols])\n\n\n  const currencyChangeHandler = (evt) => {\n    let evtCode = evt.target.value;\n    let currency = currencies.find(({ code }) => code === evtCode);\n\n    let symbol = currency !== undefined ? currency.symbol : \"\";\n    if (evt.target.id === \"baseDropDown\") {\n      setBaseCode(evtCode);\n      setBaseSymbol(symbol);\n    }\n    if (evt.target.id === \"equivalentDropDown\") {\n      setEquivalentCode(evtCode);\n      setEquivalentSymbol(symbol);\n    }\n\n  }\n\n  const handleBaseChange = (event) => {\n    let value = String(event.target.value).replace(\".\", \"\");\n    if (event.target.validity.valid) {\n      tempString += value;\n      let formattedValue = formatInput(tempString);\n      setBaseCurrency(formattedValue);\n    }\n  };\n\n\n  const focusBaseHandler = (event) => {\n    event.preventDefault();\n    let pos = event.target.value.length;\n    event.target.setSelectionRange(pos, pos);\n  };\n\n  const formatInput = (input) => {\n    return Number(input / 100).toFixed(2);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Currency Converter</h1>\n      <div className=\"input-currency\">\n        <i>{baseSymbol}</i>\n        <input\n          type=\"text\"\n          value={baseCurrency}\n          onChange={handleBaseChange}\n          onFocus={focusBaseHandler}\n          pattern=\"^-?[0-9]\\d*\\.?\\d*$\"\n        />\n        <select id=\"baseDropDown\" onChange={currencyChangeHandler} disabled={loadingCurrencies} value={baseCode}>\n          {currencies.map((curr, i) => (\n            <option key={i} value={curr.code} >\n              {curr.code}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <div className=\"input-currency\">\n          <i>{equivalentSymbol}</i>\n          <input type=\"text\" value={equivalentCurrency} readOnly={true} />\n\n          <select id=\"equivalentDropDown\" onChange={currencyChangeHandler} disabled={loadingCurrencies} value={equivalentCode} >\n            {currencies.map((curr, i) => (\n              <option key={i} value={curr.code} >\n                {curr.code}\n              </option>\n            ))}\n          </select>\n        </div>\n        {hasError &&\n          <div >\n            <h3 >The selected currency is not available!</h3>\n          </div>\n        }\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}